name: QTCommanderFinder Release

on:
  push:
    # This workflow runs only when you push a tag that starts with 'v' (e.g., v1.0, v1.0.1)
    tags:
      - 'v*'

permissions:
  contents: write # This permission is required to create a release

jobs:
  build-release:
    name: Build and Release EXE
    runs-on: windows-latest # Must run on Windows to build an .exe

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Assuming your requirements.txt is in the root directory
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Build with PyInstaller
        run: |
          # Run from the project root. We use "--paths ." to add the project root
          # to PyInstaller's search path. This allows it to correctly find the 'src'
          # module for imports like 'from src.ui...'.
          pyinstaller --onefile --windowed --icon="assets/flash-cards.png" --add-data "assets;assets" --paths . --additional-hooks-dir "src/hooks" --hidden-import sip src/qtcommanderfinder.py

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # The action will automatically use your tag name (e.g., "v1.0.1") as the release title
          # and the commit messages since the last tag as the release body.
          files: dist/qtcommanderfinder.exe
